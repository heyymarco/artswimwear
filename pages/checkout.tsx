import Head from 'next/head'
// import { Inter } from 'next/font/google'
// import styles from '@/styles/Home.module.scss'
import { Main } from '@/components/sections/Main'
import { Badge, Busy, ButtonIcon, Carousel, Check, Container, Details, DropdownListButton, EmailInput, List, ListItem, Nav, NavItem, TelInput, TextInput, useWindowResizeObserver, WindowResizeCallback } from '@reusable-ui/components'
import { dynamicStyleSheets } from '@cssfn/cssfn-react'
import { useGetPriceListQuery, useGetProductDetailQuery, useGetProductListQuery } from '@/store/features/api/apiSlice'
import { formatCurrency } from '@/libs/formatters'
import ProductImage, { ProductImageProps } from '@/components/ProductImage'
import Link from 'next/link'
import { useRouter } from 'next/router'
import { Section } from '@/components/sections/Section'
import ReactMarkdown from 'react-markdown'
import { useRef, useState } from 'react'
import { addToCart, selectCartItems } from '@/store/features/cart/cartSlice'
import { useDispatch, useSelector } from 'react-redux'
import QuantityInput from '@/components/QuantityInput'
import { breakpoints, useEvent, ValidationProvider } from '@reusable-ui/core'



// const inter = Inter({ subsets: ['latin'] })
const useCheckoutStyleSheet = dynamicStyleSheets(
    () => import(/* webpackPrefetch: true */'@/styles/checkout')
, { id: 'checkout' });



interface ProductImageWithStatusProps extends ProductImageProps {
    status : string|number
}
const ProductImageWithStatus = (props: ProductImageWithStatusProps) => {
    const [imageRef, setImageRef] = useState<HTMLElement|null>(null);
    
    const {
        status,
    ...restProductImageProps} = props;
    
    return (
        <>
            <ProductImage
                {...restProductImageProps}
                elmRef={setImageRef}
            />
            <Badge theme='danger' badgeStyle='pill' floatingOn={imageRef} floatingPlacement='right-start' floatingOffset={-12} floatingShift={-3}>
                {status}
            </Badge>
        </>
    )
}



interface WithDetailsProps {
    children : React.ReactNode
}
const WithDetails = ({children}: WithDetailsProps) => {
    // states:
    const [isDesktop, setIsDesktop] = useState<boolean>(false); // mobile first
    
    
    
    // dom effects:
    const handleWindowResize = useEvent<WindowResizeCallback>(({inlineSize: mediaCurrentWidth}) => {
        const breakpoint = breakpoints.lg;
        const newIsDesktop = (!!breakpoint && (mediaCurrentWidth >= breakpoint));
        if (isDesktop === newIsDesktop) return;
        setIsDesktop(newIsDesktop);
    });
    useWindowResizeObserver(handleWindowResize);
    
    
    
    // jsx:
    if (isDesktop) return (
        <>
            {children}
        </>
    );
    return (
        <Details className='orderCollapse' buttonChildren='Order List' theme='primary' detailsStyle='content'>
            {children}
        </Details>
    );
};



export default function Checkout() {
    const styles = useCheckoutStyleSheet();
    const cartItems   = useSelector(selectCartItems);
    const hasCart = !!cartItems.length;
    const dispatch = useDispatch();
    const {data: priceList, isLoading: isLoading1, isError: isError1} = useGetPriceListQuery();
    const {data: productList, isLoading: isLoading2, isError: isError2} = useGetProductListQuery();
    const isLoading = isLoading1 || isLoading2;
    const isError = isError1 || isError2;
    const isCartDataReady = hasCart && !!priceList && !!productList;
    
    
    

    return (
        <>
            <Head>
                <title>Create Next App</title>
                <meta name="description" content="Generated by create next app" />
            </Head>
            <Main nude={true}>
                {(isLoading || isError || !hasCart) && <Section className={styles.loading} theme='secondary'>
                    {
                        !hasCart
                        ?  <>
                            <p>
                                Your shopping cart is empty. Please add one/some products to buy.
                            </p>
                            <ButtonIcon icon='image_search' theme='primary' size='lg' gradient={true}>
                                <Link href='/products'>
                                    See our product gallery
                                </Link>
                            </ButtonIcon>
                        </>
                        : isLoading
                        ? <Busy theme='primary' size='lg' />
                        : <p>Oops, an error occured!</p>
                    }
                </Section>}
                
                {isCartDataReady && <Container className={styles.layout}>
                    <Section noContainer className={styles.orderSummary} theme='secondary' title='Order Summary'>
                        <WithDetails>
                            <List listStyle='flat'>
                                {cartItems.map((item) => {
                                    const productUnitPrice = priceList?.entities?.[item.productId]?.price ?? undefined;
                                    const product = productList?.entities?.[item.productId];
                                    return (
                                        <ListItem key={item.productId} className={styles.productEntry}
                                            enabled={!!product}
                                            theme={!product ? 'danger' : undefined}
                                            mild={!product ? false : undefined}
                                        >
                                            <h3 className='title h6'>{product?.name ?? 'PRODUCT WAS REMOVED'}</h3>
                                            <ProductImageWithStatus
                                                alt={product?.name ?? ''}
                                                src={product?.image ? `/products/${product?.name}/${product?.image}` : undefined}
                                                sizes='64px'
                                                
                                                status={item.quantity}
                                            />
                                            <p className='subPrice currencyBlock'>
                                                {!product && <>This product was removed before you purcase it</>}
                                                <span className='currency'>{formatCurrency(productUnitPrice ? (productUnitPrice * item.quantity) : undefined)}</span>
                                            </p>
                                        </ListItem>
                                    )
                                })}
                            </List>
                        </WithDetails>
                        <hr />
                        <p className='currencyBlock'>
                            Subtotal products: <span className='currency'>{formatCurrency(cartItems.reduce((accum, item) => {
                                const productUnitPrice = priceList?.entities?.[item.productId]?.price ?? undefined;
                                if (!productUnitPrice) return accum;
                                return accum + (productUnitPrice * item.quantity);
                            }, 0))}</span>
                        </p>
                        <p className='currencyBlock'>
                            Shipping: <span className='currency'>calculated at next step</span>
                        </p>
                        <hr />
                        <p className='currencyBlock'>
                            Total: <span className='currency'>calculated at next step</span>
                        </p>
                    </Section>
                    
                    <Section noContainer className={styles.expressCheckout} theme='secondary' title='Express Checkout'>
                    </Section>
                    
                    <div className={styles.checkoutAlt}>
                        <hr />
                        <span>OR</span>
                        <hr />
                    </div>
                    
                    <Section noContainer className={styles.regularCheckout} theme='secondary' title='Regular Checkout'>
                        <ValidationProvider enableValidation={true}>
                            <Section className='contact' title='Contact Information'>
                                <EmailInput name='email'     placeholder='Email'      required autoComplete='shipping email' />
                                <Check name='marketing_opt_in' defaultActive={true}>Email me with news and offers</Check>
                            </Section>
                            <Section className='shipping' title='Shipping Address'>
                                <DropdownListButton buttonChildren='Country/Region'>
                                    <ListItem>United States</ListItem>
                                    <ListItem>Indonesia</ListItem>
                                </DropdownListButton>
                                
                                <TextInput  className='firstName' placeholder='First Name' required autoComplete='shipping given-name' />
                                <TextInput  className='lastName'  placeholder='Last Name'  required autoComplete='shipping family-name' />
                                <TelInput   className='phone'     placeholder='Phone'      required autoComplete='shipping tel' />
                                <TextInput  className='address'   placeholder='Address'    required autoComplete='shipping street-address' />
                                <TextInput  className='city'      placeholder='City'       required autoComplete='shipping address-level2' />
                                <TextInput  className='zone'      placeholder='State'      required autoComplete='shipping address-level1' />
                                <TextInput  className='zip'       placeholder='ZIP Code'   required autoComplete='shipping postal-code' />
                                
                                <input type='text' className='hidden' required autoComplete='shipping country' />
                            </Section>
                        </ValidationProvider>
                    </Section>
                    
                    <Section noContainer tag='nav' className={styles.navCheckout} theme='secondary'>
                        <ButtonIcon className='back' icon='arrow_back' theme='primary' size='md' buttonStyle='link'>
                            <Link href='/cart'>
                                Return to cart
                            </Link>
                        </ButtonIcon>
                        <ButtonIcon className='next' icon='arrow_forward' theme='primary' size='lg' gradient={true} iconPosition='end'>
                            Continue to shipping
                        </ButtonIcon>
                    </Section>
                    
                    <hr className={styles.vertLine} />
                </Container>}
            </Main>
        </>
    )
}
