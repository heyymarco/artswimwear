// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}
datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}



// e-commerce models --------------------------------------------------------------------------



model Product {
    // records:
    id                              String                          @id @default(cuid()) // @map("_id")
    createdAt                       DateTime                        @default(now())
    updatedAt                       DateTime                        @updatedAt
    
    // data:
    visibility                      ProductVisibility
    
    name                            String
    
    price                           Float                           // min: 0
    shippingWeight                  Float?                          // min: 0
    
    stock                           Int?                            // min: 0
    
    path                            String                          @unique
    
    excerpt                         String?
    description                     Json?
    
    images                          String[]
    
    variantGroups                   VariantGroup[]
    
    stocks                          Stock[]
    
    // relations:
    orders                          OrdersOnProducts[]              // some Product(s) may have some related Order(s)      // many to many
    draftOrders                     DraftOrdersOnProducts[]         // some Product(s) may have some related DraftOrder(s) // many to many
    cartItems                       CartItem[]                      // some Product(s) may have some related CartItem(s)       // many to many
}
enum ProductVisibility {
    PUBLISHED
    HIDDEN
    DRAFT
}
model VariantGroup {
    // records:
    id                              String                          @id @default(cuid()) // @map("_id")
    createdAt                       DateTime                        @default(now())
    updatedAt                       DateTime                        @updatedAt
    
    // data:
    sort                            Int
    
    name                            String
    hasDedicatedStocks              Boolean
    
    variants                        Variant[]
    
    // relations:
    parentId                        String
    parent                          Product                         @relation(fields: [parentId], references: [id], onDelete: Cascade) // delete the related VariantGroup(s) if the Product deleted
}
model Variant {
    // records:
    id                              String                          @id @default(cuid()) // @map("_id")
    createdAt                       DateTime                        @default(now())
    updatedAt                       DateTime                        @updatedAt
    
    // data:
    visibility                      VariantVisibility
    sort                            Int
    
    name                            String
    
    price                           Float?                          // min: 0
    shippingWeight                  Float?                          // min: 0
    
    images                          String[]
    
    // relations:
    parentId                        String
    parent                          VariantGroup                    @relation(fields: [parentId], references: [id], onDelete: Cascade) // delete the related Variant(s) if the VariantGroup deleted
}
model TemplateVariantGroup {
    // records:
    id                              String                          @id @default(cuid()) // @map("_id")
    createdAt                       DateTime                        @default(now())
    updatedAt                       DateTime                        @updatedAt
    
    // data:
    name                            String
    hasDedicatedStocks              Boolean
    
    variants                        TemplateVariant[]
}
model TemplateVariant {
    // records:
    id                              String                          @id @default(cuid()) // @map("_id")
    createdAt                       DateTime                        @default(now())
    updatedAt                       DateTime                        @updatedAt
    
    // data:
    visibility                      VariantVisibility
    sort                            Int
    
    name                            String
    
    price                           Float?                          // min: 0
    shippingWeight                  Float?                          // min: 0
    
    images                          String[]
    
    // relations:
    parentId                        String
    parent                          TemplateVariantGroup            @relation(fields: [parentId], references: [id], onDelete: Cascade) // delete the related TemplateVariant(s) if the TemplateVariantGroup deleted
}
enum VariantVisibility {
    PUBLISHED
    DRAFT
}
model Stock {
    // records:
    id                              String                          @id @default(cuid()) // @map("_id")
    
    // data:
    value                           Int?                            // min: 0
    
    // relations:
    parentId                        String
    parent                          Product                         @relation(fields: [parentId], references: [id], onDelete: Cascade) // delete the related Stock(s) if the Product deleted
    
    variantIds                      String[]                        // manual relation foreign key(s)
}



model ShippingProvider {
    // records:
    id                              String                          @id @default(cuid()) // @map("_id")
    createdAt                       DateTime                        @default(now())
    updatedAt                       DateTime                        @updatedAt
    
    // data:
    visibility                      ShippingVisibility
    
    autoUpdate                      Boolean                         @default(false)
    
    name                            String                          // minLength: 2, maxLength: 50
    
    weightStep                      Float                           // min: 0, max: 1000
    eta                             ShippingProviderEta?
    rates                           ShippingProviderRate[]
    
    useZones                        Boolean
    zones                           CoverageCountry[]
    
    // relations:
    orders                          Order[]                         @relation("OrdersOnShipping")      // one ShippingProvider may have some related Order(s)       // one  to many
    draftOrders                     DraftOrder[]                    @relation("DraftOrdersOnShipping") // one ShippingProvider may have some related DraftOrder(s)  // one  to many
    checkout                        Checkout[]                      @relation("CheckoutsOnShipping")   // one ShippingProvider may have some related Checkout(s)    // one  to many
}
model CoverageCountry {
    // records:
    id                              String                          @id @default(cuid()) // @map("_id")
    
    // data:
    sort                            Int
    
    name                            String                          // minLength: 2, maxLength: 3
    
    eta                             CoverageCountryEta?
    rates                           CoverageCountryRate[]
    
    useZones                        Boolean
    zones                           CoverageState[]
    
    // relations:
    parentId                        String
    parent                          ShippingProvider                @relation(fields: [parentId], references: [id], onDelete: Cascade) // delete the related CoverageCountry(s) if the ShippingProvider deleted
}
model CoverageState {
    // records:
    id                              String                          @id @default(cuid()) // @map("_id")
    
    // data:
    sort                            Int
    
    name                            String                          // minLength: 3, maxLength: 50
    
    eta                             CoverageStateEta?
    rates                           CoverageStateRate[]
    
    useZones                        Boolean
    zones                           CoverageCity[]
    
    // relations:
    parentId                        String
    parent                          CoverageCountry                 @relation(fields: [parentId], references: [id], onDelete: Cascade) // delete the related CoverageState(s) if the CoverageCountry deleted
}
model CoverageCity {
    // records:
    id                              String                          @id @default(cuid()) // @map("_id")
    updatedAt                       DateTime?
    
    // data:
    sort                            Int
    
    name                            String                          // minLength: 3, maxLength: 50
    
    eta                             CoverageCityEta?
    rates                           CoverageCityRate[]
    
    // relations:
    parentId                        String
    parent                          CoverageState                   @relation(fields: [parentId], references: [id], onDelete: Cascade) // delete the related CoverageCity(s) if the CoverageState deleted
}
enum ShippingVisibility {
    PUBLISHED
    DRAFT
}
model DefaultShippingOrigin {
    // records:
    id                              String                          @id @default(cuid()) // @map("_id")
    
    // data:
    country                         String                          // minLength: 2 , maxLength:  3
    state                           String                          // minLength: 2 , maxLength: 50
    city                            String                          // minLength: 2 , maxLength: 50
    zip                             String?                         // minLength: 2 , maxLength: 11
    address                         String                          // minLength: 5 , maxLength: 90
    
    company                         String                          // minLength: 2 , maxLength: 30
    firstName                       String                          // minLength: 2 , maxLength: 30
    lastName                        String                          // minLength: 1 , maxLength: 30
    phone                           String                          // minLength: 5 , maxLength: 15
}
model ShippingProviderEta {
    // records:
    id                              String                          @id @default(cuid()) // @map("_id")
    
    // data:
    min                             Float                           // min: 0, max: 999
    max                             Float                           // min: `min`, max: 999
    
    // relations:
    parentId                        String                          @unique
    parent                          ShippingProvider                @relation(fields: [parentId], references: [id], onDelete: Cascade) // delete the related ShippingProviderEta if the ShippingProvider deleted
}
model CoverageCountryEta {
    // records:
    id                              String                          @id @default(cuid()) // @map("_id")
    
    // data:
    min                             Float                           // min: 0, max: 999
    max                             Float                           // min: `min`, max: 999
    
    // relations:
    parentId                        String                          @unique
    parent                          CoverageCountry                 @relation(fields: [parentId], references: [id], onDelete: Cascade) // delete the related CoverageCountryEta if the CoverageCountry deleted
}
model CoverageStateEta {
    // records:
    id                              String                          @id @default(cuid()) // @map("_id")
    
    // data:
    min                             Float                           // min: 0, max: 999
    max                             Float                           // min: `min`, max: 999
    
    // relations:
    parentId                        String                          @unique
    parent                          CoverageState                   @relation(fields: [parentId], references: [id], onDelete: Cascade) // delete the related CoverageStateEta if the CoverageState deleted
}
model CoverageCityEta {
    // records:
    id                              String                          @id @default(cuid()) // @map("_id")
    
    // data:
    min                             Float                           // min: 0, max: 999
    max                             Float                           // min: `min`, max: 999
    
    // relations:
    parentId                        String                          @unique
    parent                          CoverageCity                    @relation(fields: [parentId], references: [id], onDelete: Cascade) // delete the related CoverageCityEta if the CoverageCity deleted
}
model ShippingProviderRate {
    // records:
    id                              String                          @id @default(cuid()) // @map("_id")
    
    // data:
    sort                            Int
    
    start                           Float                           // min: 0, max: 1000
    rate                            Float                           // min: 0, max: 999999999
    
    // relations:
    parentId                        String
    parent                          ShippingProvider                @relation(fields: [parentId], references: [id], onDelete: Cascade) // delete the related ShippingProviderRate(s) if the ShippingProvider deleted
}
model CoverageCountryRate {
    // records:
    id                              String                          @id @default(cuid()) // @map("_id")
    
    // data:
    sort                            Int
    
    start                           Float                           // min: 0, max: 1000
    rate                            Float                           // min: 0, max: 999999999
    
    // relations:
    parentId                        String
    parent                          CoverageCountry                 @relation(fields: [parentId], references: [id], onDelete: Cascade) // delete the related CoverageCountryRate(s) if the CoverageCountry deleted
}
model CoverageStateRate {
    // records:
    id                              String                          @id @default(cuid()) // @map("_id")
    
    // data:
    sort                            Int
    
    start                           Float                           // min: 0, max: 1000
    rate                            Float                           // min: 0, max: 999999999
    
    // relations:
    parentId                        String
    parent                          CoverageState                   @relation(fields: [parentId], references: [id], onDelete: Cascade) // delete the related CoverageStateRate(s) if the CoverageState deleted
}
model CoverageCityRate {
    // records:
    id                              String                          @id @default(cuid()) // @map("_id")
    
    // data:
    sort                            Int
    
    start                           Float                           // min: 0, max: 1000
    rate                            Float                           // min: 0, max: 999999999
    
    // relations:
    parentId                        String
    parent                          CoverageCity                    @relation(fields: [parentId], references: [id], onDelete: Cascade) // delete the related CoverageCityRate(s) if the CoverageCity deleted
}

model EasypostRateCache {
    // records:
    id                              String                          @id @default(cuid()) // @map("_id")
    updatedAt                       DateTime                        @updatedAt
    
    // data:
    key                             String                          @unique
    items                           EasypostRateCacheItem[]
}
model EasypostRateCacheItem {
    // records:
    id                              String                          @id @default(cuid()) // @map("_id")
    
    // data:
    carrier                         String
    service                         String
    
    eta                             EasypostRateCacheItemEta?
    rate                            Float
    currency                        String
    
    // relations:
    parentId                        String
    parent                          EasypostRateCache               @relation(fields: [parentId], references: [id], onDelete: Cascade) // delete the related EasypostRateCacheItem(s) if the EasypostRateCache deleted
}
model EasypostRateCacheItemEta {
    // records:
    id                              String                          @id @default(cuid()) // @map("_id")
    
    // data:
    min                             Float                           // min: 0, max: 999
    max                             Float                           // min: `min`, max: 999
    
    // relations:
    parentId                        String                          @unique
    parent                          EasypostRateCacheItem           @relation(fields: [parentId], references: [id], onDelete: Cascade) // delete the related EasypostRateCacheItemEta if the EasypostRateCacheItem deleted
}



model DraftOrder {
    // records:
    id                              String                          @id @default(cuid()) // @map("_id")
    createdAt                       DateTime                        @default(now())
    expiresAt                       DateTime
    
    // data:
    orderId                         String                          @unique // a secondary id for public identifier
    paymentId                       String?                         @unique // a secondary id for public identifier
    
    currency                        DraftOrderCurrency?
    
    shippingAddress                 DraftShippingAddress?
    shippingCost                    Float?                          // min: 0
    
    items                           DraftOrdersOnProducts[]
    
    // relations:
    customerId                      String?
    customer                        Customer?                       @relation(fields: [customerId]         , references: [id], "DraftOrdersOnCustomer", onDelete: SetNull) // preserve the related DraftOrder(s) if the Customer deleted
    
    guestId                         String?
    guest                           Guest?                          @relation(fields: [guestId]            , references: [id], "DraftOrdersOnGuest"   , onDelete: SetNull) // preserve the related DraftOrder(s) if the Guest deleted
    
    shippingProviderId              String?
    shippingProvider                ShippingProvider?               @relation(fields: [shippingProviderId] , references: [id], "DraftOrdersOnShipping", onDelete: SetNull) // preserve the related DraftOrder(s) if the ShippingProvider deleted
}
model Order {
    // records:
    id                              String                          @id @default(cuid()) // @map("_id")
    createdAt                       DateTime                        @default(now())
    updatedAt                       DateTime                        @updatedAt
    
    // data:
    orderId                         String                          @unique // a secondary id for public identifier
    paymentId                       String?                         @unique // a secondary id for public identifier
    
    currency                        OrderCurrency?
    
    shippingAddress                 ShippingAddress?
    shippingCost                    Float?                          // min: 0
    
    orderStatus                     OrderStatus                     @default(NEW_ORDER)
    orderTrouble                    Json?
    cancelationReason               Json?
    
    payment                         Payment?
    paymentConfirmation             PaymentConfirmation?
    
    shipment                        Shipment?
    
    items                           OrdersOnProducts[]
    
    // relations:
    customerId                      String?
    customer                        Customer?                       @relation(fields: [customerId]         , references: [id], "OrdersOnCustomer", onDelete: SetNull) // preserve the related Order(s) if the Customer deleted
    
    guestId                         String?
    guest                           Guest?                          @relation(fields: [guestId]            , references: [id], "OrdersOnGuest"   , onDelete: SetNull) // preserve the related Order(s) if the Guest deleted
    
    shippingProviderId              String?
    shippingProvider                ShippingProvider?               @relation(fields: [shippingProviderId] , references: [id], "OrdersOnShipping", onDelete: SetNull) // preserve the related Order(s) if the ShippingProvider deleted
}
model DraftOrderCurrency {
    // records:
    id                              String                          @id @default(cuid()) // @map("_id")
    
    // data:
    currency                        String                          // minLength: 3, maxLength: 3
    rate                            Float                           // min: 0
    
    // relations:
    parentId                        String                          @unique
    parent                          DraftOrder                      @relation(fields: [parentId], references: [id], onDelete: Cascade) // delete the related DraftOrderCurrency(s) if the DraftOrder deleted
}
model OrderCurrency {
    // records:
    id                              String                          @id @default(cuid()) // @map("_id")
    
    // data:
    currency                        String                          // minLength: 3, maxLength: 3
    rate                            Float                           // min: 0
    
    // relations:
    parentId                        String                          @unique
    parent                          Order                           @relation(fields: [parentId], references: [id], onDelete: Cascade) // delete the related OrderCurrency(s) if the Order deleted
}
model DraftShippingAddress {
    // records:
    id                              String                          @id @default(cuid()) // @map("_id")
    
    // data:
    country                         String                          // minLength: 2 , maxLength:  3
    state                           String                          // minLength: 2 , maxLength: 50
    city                            String                          // minLength: 2 , maxLength: 50
    zip                             String?                         // minLength: 2 , maxLength: 11
    address                         String                          // minLength: 5 , maxLength: 90
    
    firstName                       String                          // minLength: 2 , maxLength: 30
    lastName                        String                          // minLength: 1 , maxLength: 30
    phone                           String                          // minLength: 5 , maxLength: 15
    
    // relations:
    parentId                        String                          @unique
    parent                          DraftOrder                      @relation(fields: [parentId], references: [id], onDelete: Cascade) // delete the related DraftShippingAddress(s) if the DraftOrder deleted
}
model ShippingAddress {
    // records:
    id                              String                          @id @default(cuid()) // @map("_id")
    
    // data:
    country                         String                          // minLength: 2 , maxLength:  3
    state                           String                          // minLength: 2 , maxLength: 50
    city                            String                          // minLength: 2 , maxLength: 50
    zip                             String?                         // minLength: 2 , maxLength: 11
    address                         String                          // minLength: 5 , maxLength: 90
    
    firstName                       String                          // minLength: 2 , maxLength: 30
    lastName                        String                          // minLength: 1 , maxLength: 30
    phone                           String                          // minLength: 5 , maxLength: 15
    
    // relations:
    parentId                        String                          @unique
    parent                          Order                           @relation(fields: [parentId], references: [id], onDelete: Cascade) // delete the related ShippingAddress(s) if the Order deleted
}
model BillingAddress {
    // records:
    id                              String                          @id @default(cuid()) // @map("_id")
    
    // data:
    country                         String                          // minLength: 2 , maxLength:  3
    state                           String                          // minLength: 2 , maxLength: 50
    city                            String                          // minLength: 2 , maxLength: 50
    zip                             String?                         // minLength: 2 , maxLength: 11
    address                         String                          // minLength: 5 , maxLength: 90
    
    firstName                       String                          // minLength: 2 , maxLength: 30
    lastName                        String                          // minLength: 1 , maxLength: 30
    phone                           String                          // minLength: 5 , maxLength: 15
    
    // relations:
    parentId                        String                          @unique
    parent                          Payment                         @relation(fields: [parentId], references: [id], onDelete: Cascade) // delete the related BillingAddress(s) if the Payment deleted
}
enum OrderStatus {
    NEW_ORDER
    CANCELED
    EXPIRED
    PROCESSED
    ON_THE_WAY
    IN_TROUBLE
    COMPLETED
}
model Payment {
    // records:
    id                              String                          @id @default(cuid()) // @map("_id")
    
    // data:
    type                            PaymentType
    brand                           String?
    identifier                      String?
    expiresAt                       DateTime?
    
    amount                          Float                           // min: 0
    fee                             Float                           // min: 0
    
    billingAddress                  BillingAddress?
    
    // relations:
    parentId                        String?                         @unique
    parent                          Order?                          @relation(fields: [parentId], references: [id], onDelete: SetNull) // preserve the related Payment(s) if the Order deleted
}
enum PaymentType {
    CARD
    PAYPAL
    EWALLET
    CUSTOM
    MANUAL
    MANUAL_PAID
}
model PaymentConfirmation {
    // records:
    id                              String                          @id @default(cuid()) // @map("_id")
    reportedAt                      DateTime?                       // manually set
    reviewedAt                      DateTime?                       // manually set
    
    // data:
    token                           String                          @unique
    
    amount                          Float?                          // min: 0
    payerName                       String?                         // minLength: 2, maxLength: 50
    paymentDate                     DateTime?
    
    originatingBank                 String?                         // minLength: 2, maxLength: 50
    destinationBank                 String?                         // minLength: 2, maxLength: 50
    
    rejectionReason                 Json?
    
    // relations:
    parentId                        String                          @unique
    parent                          Order                           @relation(fields: [parentId], references: [id], onDelete: Cascade) // delete the related PaymentConfirmation if the Order deleted
}
model Shipment {
    // records:
    id                              String                          @id @default(cuid()) // @map("_id")
    
    // data:
    token                           String                          @unique
    trackerId                       String?                         @unique
    
    carrier                         String?                         // minLength: 1, maxLength: 50
    number                          String?                         // minLength: 1, maxLength: 50
    eta                             ShipmentEta?
    cost                            Float?
    
    logs                            ShipmentLog[]
    
    // relations:
    parentId                        String                          @unique
    parent                          Order                           @relation(fields: [parentId], references: [id], onDelete: Cascade) // delete the related Shipment if the Order deleted
}
model ShipmentEta {
    // records:
    id                              String                          @id @default(cuid()) // @map("_id")
    
    // data:
    min                             Float                           // min: 0, max: 999
    max                             Float                           // min: `min`, max: 999
    
    // relations:
    parentId                        String                          @unique
    parent                          Shipment                        @relation(fields: [parentId], references: [id], onDelete: Cascade) // delete the related ShipmentEta if the Shipment deleted
}
model ShipmentLog {
    // records:
    id                              String                          @id @default(cuid()) // @map("_id")
    reportedAt                      DateTime?                       // manually set
    
    // data:
    log                             String
    
    // relations:
    parentId                        String
    parent                          Shipment                        @relation(fields: [parentId], references: [id], onDelete: Cascade) // delete the related ShipmentLog(s) if the Shipment deleted
}
model DraftOrdersOnProducts {
    // records:
    id                              String                          @id @default(cuid()) // @map("_id")
    
    // data:
    price                           Float                           // min: 0
    shippingWeight                  Float?                          // min: 0
    quantity                        Int                             // min: 1
    
    // relations:
    parentId                        String
    parent                          DraftOrder                      @relation(fields: [parentId]  , references: [id], onDelete: Cascade) // delete the related DraftOrdersOnProducts(s) if the DraftOrder deleted
    
    productId                       String?
    product                         Product?                        @relation(fields: [productId] , references: [id], onDelete: SetNull) // preserve the related DraftOrdersOnProducts(s) if the Product deleted
    
    variantIds                      String[]                        // manual relation foreign key(s)
}
model OrdersOnProducts {
    // records:
    id                              String                          @id @default(cuid()) // @map("_id")
    
    // data:
    price                           Float                           // min: 0
    shippingWeight                  Float?                          // min: 0
    quantity                        Int                             // min: 1
    
    // relations:
    parentId                        String
    parent                          Order                           @relation(fields: [parentId]  , references: [id], onDelete: Cascade) // delete the related OrdersOnProducts(s) if the Order deleted
    
    productId                       String?
    product                         Product?                        @relation(fields: [productId] , references: [id], onDelete: SetNull) // preserve the related OrdersOnProducts(s) if the Product deleted
    
    variantIds                      String[]                        // manual relation foreign key(s)
}



model Country {
    // records:
    id                              String                          @id @default(cuid()) // @map("_id")
    
    // data:
    enabled                         Boolean
    name                            String
    
    code                            String                          // minLength: 2 , maxLength:  3
    dialCode                        String
}



// customer models ----------------------------------------------------------------------------



model Customer {
    // records:
    id                              String                          @id @default(cuid()) // @map("_id")
    createdAt                       DateTime                        @default(now())
    updatedAt                       DateTime                        @updatedAt
    
    // data:
    name                            String                                  // minLength: 2, maxLength: 30
    email                           String                          @unique // minLength: 5, maxLength: 50
    
    emailVerified                   DateTime?
    image                           String?
    
    preference                      CustomerPreference?
    
    cart                            Cart?
    checkout                        Checkout?
    
    accounts                        CustomerAccount[]
    sessions                        CustomerSession[]
    credentials                     CustomerCredentials?
    passwordResetToken              CustomerPasswordResetToken?
    emailConfirmationToken          CustomerEmailConfirmationToken?
    
    // relations:
    orders                          Order[]                         @relation("OrdersOnCustomer")      // one Customer may have some related Order(s)       // one  to many
    draftOrders                     DraftOrder[]                    @relation("DraftOrdersOnCustomer") // one Customer may have some related DraftOrder(s)  // one  to many
}
model Guest {
    // records:
    id                              String                          @id @default(cuid()) // @map("_id")
    createdAt                       DateTime                        @default(now())
    updatedAt                       DateTime                        @updatedAt
    
    // data:
    name                            String                          // minLength: 2, maxLength: 30
    email                           String                          // minLength: 5, maxLength: 50
    
    preference                      GuestPreference?
    
    // relations:
    orders                          Order[]                         @relation("OrdersOnGuest")      // one Guest may have some related Order(s)        // one  to many
    draftOrders                     DraftOrder[]                    @relation("DraftOrdersOnGuest") // one Guest may have some related DraftOrder(s)   // one  to many
}
model CustomerPreference {
    // records:
    id                              String                          @id @default(cuid()) // @map("_id")
    
    // data:
    marketingOpt                    Boolean?
    timezone                        Float?
    
    // relations:
    parentId                        String                          @unique
    parent                          Customer                        @relation(fields: [parentId], references: [id], onDelete: Cascade) // delete the related CustomerPreference if the Customer deleted
}
model GuestPreference {
    // records:
    id                              String                          @id @default(cuid()) // @map("_id")
    
    // data:
    marketingOpt                    Boolean?
    timezone                        Float?
    
    // relations:
    parentId                        String                          @unique
    parent                          Guest                           @relation(fields: [parentId], references: [id], onDelete: Cascade) // delete the related GuestPreference if the Guest deleted
}



model Cart {
    // records:
    id                              String                          @id @default(cuid()) // @map("_id")
    
    // data:
    currency                        String                          // minLength: 3, maxLength: 3
    items                           CartItem[]
    
    // relations:
    parentId                        String                          @unique
    parent                          Customer                        @relation(fields: [parentId], references: [id], onDelete: Cascade) // delete the related Cart if the Customer deleted
}
model CartItem {
    // records:
    id                              String                          @id @default(cuid()) // @map("_id")
    
    // data:
    quantity                        Int                             // min: 1
    
    // relations:
    parentId                        String
    parent                          Cart                            @relation(fields: [parentId]  , references: [id], onDelete: Cascade) // delete the related CartItem(s) if the Cart deleted
    
    productId                       String
    product                         Product                         @relation(fields: [productId] , references: [id], onDelete: Cascade) // delete the related CartItem(s) if the Product deleted
    
    variantIds                      String[]                        // manual relation foreign key(s)
}



model Checkout {
    // records:
    id                              String                          @id @default(cuid()) // @map("_id")
    updatedAt                       DateTime                        @updatedAt
    
    // data:
    checkoutStep                    CheckoutStep                    @default(INFO)
    shippingAddress                 CheckoutShippingAddress?
    billingAsShipping               Boolean                         @default(true)
    billingAddress                  CheckoutBillingAddress?
    paymentMethod                   String?
    // paymentSession                  CheckoutPaymentSession?
    
    // relations:
    parentId                        String                          @unique
    parent                          Customer                        @relation(fields: [parentId], references: [id], onDelete: Cascade) // delete the related Checkout if the Customer deleted
    
    shippingProviderId              String?
    shippingProvider                ShippingProvider?               @relation(fields: [shippingProviderId] , references: [id], "CheckoutsOnShipping", onDelete: SetNull) // preserve the related Checkout(s) if the ShippingProvider deleted
}
enum CheckoutStep {
    INFO
    SHIPPING
    PAYMENT
    PENDING
    PAID
}
model CheckoutShippingAddress {
    // records:
    id                              String                          @id @default(cuid()) // @map("_id")
    
    // data:
    country                         String                          // minLength: 2 , maxLength:  3
    state                           String                          // minLength: 2 , maxLength: 50
    city                            String                          // minLength: 2 , maxLength: 50
    zip                             String?                         // minLength: 2 , maxLength: 11
    address                         String                          // minLength: 5 , maxLength: 90
    
    firstName                       String                          // minLength: 2 , maxLength: 30
    lastName                        String                          // minLength: 1 , maxLength: 30
    phone                           String                          // minLength: 5 , maxLength: 15
    
    // relations:
    parentId                        String                          @unique
    parent                          Checkout                        @relation(fields: [parentId], references: [id], onDelete: Cascade) // delete the related CheckoutShippingAddress(s) if the Checkout deleted
}
model CheckoutBillingAddress {
    // records:
    id                              String                          @id @default(cuid()) // @map("_id")
    
    // data:
    country                         String                          // minLength: 2 , maxLength:  3
    state                           String                          // minLength: 2 , maxLength: 50
    city                            String                          // minLength: 2 , maxLength: 50
    zip                             String?                         // minLength: 2 , maxLength: 11
    address                         String                          // minLength: 5 , maxLength: 90
    
    firstName                       String                          // minLength: 2 , maxLength: 30
    lastName                        String                          // minLength: 1 , maxLength: 30
    phone                           String                          // minLength: 5 , maxLength: 15
    
    // relations:
    parentId                        String                          @unique
    parent                          Checkout                        @relation(fields: [parentId], references: [id], onDelete: Cascade) // delete the related CheckoutBillingAddress(s) if the Checkout deleted
}
// model CheckoutPaymentSession {
//     // records:
//     id                              String                          @id @default(cuid()) // @map("_id")
//     
//     // data:
//     paypalSession                   String
//     expiresAt                       Int // use Int instead of DateTime for easier fetch transport
//     refreshAt                       Int // use Int instead of DateTime for easier fetch transport
//     
//     // relations:
//     parentId                        String                          @unique
//     parent                          Checkout                        @relation(fields: [parentId], references: [id], onDelete: Cascade) // delete the related CheckoutPaymentSession(s) if the Checkout deleted
// }



// customer-auth models -----------------------------------------------------------------------



model CustomerAccount {
    // records:
    id                              String                          @id @default(cuid()) // @map("_id")
    
    // provider types:
    type                            String
    provider                        String
    providerAccountId               String
    @@unique([provider, providerAccountId])
    
    // jwt sessions:
    refresh_token                   String?
    access_token                    String?
    expires_at                      Int?
    
    // jwt meta:
    token_type                      String?
    scope                           String?
    id_token                        String?
    session_state                   String?
    
    // relations:
    parentId                        String
    parent                          Customer                        @relation(fields: [parentId], references: [id], onDelete: Cascade) // delete the related CustomerAccount(s) if the Customer deleted
}

model CustomerSession {
    // records:
    id                              String                          @id @default(cuid()) // @map("_id")
    expires                         DateTime
    
    // data:
    sessionToken                    String                          @unique
    
    // relations:
    parentId                        String
    parent                          Customer                        @relation(fields: [parentId], references: [id], onDelete: Cascade) // delete the related CustomerSession(s) if the Customer deleted
}

model CustomerCredentials {
    // records:
    id                              String                          @id @default(cuid()) // @map("_id")
    
    // data:
    failureAttempts                 Int?
    lockedAt                        DateTime?
    username                        String?                         @unique
    password                        String?
    
    // relations:
    parentId                        String                          @unique
    parent                          Customer                        @relation(fields: [parentId], references: [id], onDelete: Cascade) // delete the related CustomerCredentials if the Customer deleted
}

model CustomerPasswordResetToken {
    // records:
    id                              String                          @id @default(cuid()) // @map("_id")
    updatedAt                       DateTime                        @updatedAt
    expiresAt                       DateTime
    
    // data:
    token                           String                          @unique
    
    // relations:
    parentId                        String                          @unique
    parent                          Customer                        @relation(fields: [parentId], references: [id], onDelete: Cascade) // delete the related CustomerPasswordResetToken if the Customer deleted
}

model CustomerEmailConfirmationToken {
    // records:
    id                              String                          @id @default(cuid()) // @map("_id")
    
    // data:
    token                           String                          @unique
    
    // relations:
    parentId                        String                          @unique
    parent                          Customer                        @relation(fields: [parentId], references: [id], onDelete: Cascade) // delete the related CustomerEmailConfirmationToken if the Customer deleted
}



// admin models -------------------------------------------------------------------------------



model Admin {
    // records:
    id                              String                          @id @default(cuid()) // @map("_id")
    createdAt                       DateTime                        @default(now())
    updatedAt                       DateTime                        @updatedAt
    
    // data:
    name                            String
    email                           String                          @unique
    
    emailVerified                   DateTime?
    image                           String?
    
    preference                      AdminPreference?
    
    accounts                        AdminAccount[]
    sessions                        AdminSession[]
    credentials                     AdminCredentials?
    passwordResetToken              AdminPasswordResetToken?
    emailConfirmationToken          AdminEmailConfirmationToken?
    
    // relations:
    roleId                          String?
    role                            AdminRole?                      @relation(fields: [roleId], references: [id], onDelete: SetNull) // preserve the related Admin(s) if the AdminRole deleted
}
model AdminPreference {
    // records:
    id                              String                          @id @default(cuid()) // @map("_id")
    
    // data:
    emailOrderNewPending            Boolean?
    emailOrderNewPaid               Boolean?
    emailOrderCanceled              Boolean?
    emailOrderExpired               Boolean?
    emailOrderConfirmed             Boolean?
    emailOrderRejected              Boolean?
    emailOrderProcessing            Boolean?
    emailOrderShipping              Boolean?
    emailOrderCompleted             Boolean?
    
    // relations:
    parentId                        String                          @unique
    parent                          Admin                           @relation(fields: [parentId], references: [id], onDelete: Cascade) // delete the related AdminPreference if the Admin deleted
}



// admin-auth models --------------------------------------------------------------------------



model AdminAccount {
    // records:
    id                              String                          @id @default(cuid()) // @map("_id")
    
    // provider types:
    type                            String
    provider                        String
    providerAccountId               String
    @@unique([provider, providerAccountId])
    
    // jwt sessions:
    refresh_token                   String?
    access_token                    String?
    expires_at                      Int?
    
    // jwt meta:
    token_type                      String?
    scope                           String?
    id_token                        String?
    session_state                   String?
    
    // relations:
    parentId                        String
    parent                          Admin                           @relation(fields: [parentId], references: [id], onDelete: Cascade) // delete the related AdminAccount(s) if the Admin deleted
}

model AdminSession {
    // records:
    id                              String                          @id @default(cuid()) // @map("_id")
    expires                         DateTime
    
    // data:
    sessionToken                    String                          @unique
    
    // relations:
    parentId                        String
    parent                          Admin                           @relation(fields: [parentId], references: [id], onDelete: Cascade) // delete the related AdminSession(s) if the Admin deleted
}

model AdminCredentials {
    // records:
    id                              String                          @id @default(cuid()) // @map("_id")
    
    // data:
    failureAttempts                 Int?
    lockedAt                        DateTime?
    username                        String?                         @unique
    password                        String?
    
    // relations:
    parentId                        String                          @unique
    parent                          Admin                           @relation(fields: [parentId], references: [id], onDelete: Cascade) // delete the related AdminCredentials if the Admin deleted
}

model AdminPasswordResetToken {
    // records:
    id                              String                          @id @default(cuid()) // @map("_id")
    updatedAt                       DateTime                        @updatedAt
    expiresAt                       DateTime
    
    // data:
    token                           String                          @unique
    
    // relations:
    parentId                        String                          @unique
    parent                          Admin                           @relation(fields: [parentId], references: [id], onDelete: Cascade) // delete the related AdminPasswordResetToken if the Admin deleted
}

model AdminEmailConfirmationToken {
    // records:
    id                              String                          @id @default(cuid()) // @map("_id")
    
    // data:
    token                           String                          @unique
    
    // relations:
    parentId                        String                          @unique
    parent                          Admin                           @relation(fields: [parentId], references: [id], onDelete: Cascade) // delete the related AdminEmailConfirmationToken if the Admin deleted
}

model AdminRole {
    // records:
    id                              String                          @id @default(cuid()) // @map("_id")
    
    // data:
    name                            String                          @unique
    
    product_r                       Boolean                         @default(false)
    product_c                       Boolean                         @default(false)
    product_ud                      Boolean                         @default(false)
    product_ui                      Boolean                         @default(false)
    product_up                      Boolean                         @default(false)
    product_us                      Boolean                         @default(false)
    product_uv                      Boolean                         @default(false)
    product_d                       Boolean                         @default(false)
    
    order_r                         Boolean                         @default(false)
    order_us                        Boolean                         @default(false)
    order_usa                       Boolean                         @default(false)
    order_upmu                      Boolean                         @default(false)
    order_upmp                      Boolean                         @default(false)
    
    shipping_r                      Boolean                         @default(false)
    shipping_c                      Boolean                         @default(false)
    shipping_ud                     Boolean                         @default(false)
    shipping_up                     Boolean                         @default(false)
    shipping_uv                     Boolean                         @default(false)
    shipping_d                      Boolean                         @default(false)
    
    admin_r                         Boolean                         @default(false)
    admin_c                         Boolean                         @default(false)
    admin_un                        Boolean                         @default(false)
    admin_uu                        Boolean                         @default(false)
    admin_ue                        Boolean                         @default(false)
    admin_up                        Boolean                         @default(false)
    admin_ui                        Boolean                         @default(false)
    admin_ur                        Boolean                         @default(false)
    admin_d                         Boolean                         @default(false)
    
    role_c                          Boolean                         @default(false)
    role_u                          Boolean                         @default(false)
    role_d                          Boolean                         @default(false)
    
    // relations:
    admins                          Admin[]                         // a AdminRole may have some related Admin(s)  // one  to many
}
